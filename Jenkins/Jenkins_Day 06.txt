												Online LIVE Training on 
										JENKINS 👨‍💼 + DOCKER 🐳 + KUBERNETES ☸️
														by
												KASTRO KIRAN V
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Agenda of the Session
*****************************************
1️⃣ Jenkins Architecture
2️⃣ Jenkins Master & Slave - Project
3️⃣ Jenkins Installation on Ubuntu VM

------------------------------------------------------------
1️⃣ Jenkins Architecture
------------------------------------------------------------
Jenkins follows a master-agent (Master-Slave) architecture.
It is designed for distributed build automation process.
Jenkins architecture consists of two main components;
	1. Jenkins Master
	2. Jenkins Agent (Worker Node)

------------------------------------------------------------
2️⃣ Jenkins Master & Slave Project
------------------------------------------------------------
Can we have multiple MASTER Nodes?
	- NO

Can we have multiple WORKER Nodes?
	- YES

So far in the pipeline scripts, we have kept "agent any" now we will change that a little bit. To do this, we need to configure the slave 1 and slave 2 VM names in the Jenkins dashboard

*********
Step 1
*********
Launch Amazon Linux 2 AMI, t2.micro - Launch 3 VMs
VM1 Name: Master, VM2 Name: Slave 1, VM3 Name: Slave 2

As all these are Linux VMs, they will be communicated with each other using SSH protocol
*********
Step 2
*********
Connect to the VM1 i.e Master VM and execute the below commands;
sudo -s   
sudo yum update

hostnamectl set-hostname MASTER
sudo -i
You will see root@MASTER in the beginning 

To install jenkins using shell file;
vi jenkins.sh ----> Paste the below commands in the file ---->
#STEP-1: Installing Git and Maven
yum install git maven -y

#STEP-2: Repo Information (jenkins.io --> download -- > redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

#STEP-3: Download Java 17 and Jenkins
sudo yum install java-17-amazon-corretto -y
yum install jenkins -y

#STEP-4: Start and check the JENKINS Status
systemctl start jenkins.service
systemctl status jenkins.service

#STEP-5: Auto-Start Jenkins
chkconfig jenkins on

----> esc ----> :wq ----> sh jenkins.sh ----> You will see jenkins is running ----> Access jenkins and setup jenkins

*********
Step 3
*********
Note: No need to install Jenkins on slave nodes
Note: In the pipeline, we usually have git, java, maven, so we need to install these 3 s/w on slave nodes

Connect to Slave 1 and Slave 2 VMs also

Goto Slave 1 connected tab in Moba and set the hostname;
sudo -s
sudo yum update
hostnamectl set-hostname SLAVE-1
sudo -i
You will see root@SLAVE-1 in the beginning 

Goto Slave 2 connected tab in Moba and set the hostname;
sudo -s
sudo yum update
hostnamectl set-hostname SLAVE-2
sudo -i
You will see root@SLAVE-2 in the beginning 

Goto Slave 1 & Slave 2 connected tabs in Moba ----> We shall setup Slave 1 and Slave 2 now.
Execute below java command in both Slave Nodes

sudo yum install java-17-amazon-corretto-devel maven git -y 

*********
Step 4
*********
Lets configure the Slave Nodes in Jenkins dashboard
Adding Slave 1 in Jenkins dashboard
Jenkins dashboard ----> Build executor status (left pane bottom) ----> Currently you will see "Built-in node" which means it is a MASTER node ----> Click on "New Node" ----> Node name: slave1, Type: Permanent Agent ----> Create ----> Name: slave1 ----> Description: This is Slave 1 ----> No. of executors: 3 (this is to run number of builds parallelly) ----> Remote root directory: /tmp (In this path of slave nodes, the builds will be stored) ----> Labels: slave1 (This label name is very important because this label name is the same name we should configure in the pipeline script. Based on this only, the job will get executed on whichever worker node we want) ----> Usage: Only build jobs with label expressions matching this node ----> Launch method: Launch agents via SSH ----> Host: <PrivateIPofSlave1> ----> Credentials: Add: Jenkins ----> Scope: Global, Kind: SSH username with private key, Scope: Global, ID: <Leave Blank> ,Description: <Leave Blank>, Username: ec2-user, Private key: Enter directly: Paste the entire content from pem file ----> Save ----> From the dropdown, select "ec2-user" ----> Host key verification strategy: Non verifying verification strategy ----> Availability: Keep this agent online as much as possible ----> Save ----> You can see Slave1 got added. Just refresh, you will see the values under free disk space, free temp space and other options available

Adding Slave 2 in Jenkins dashboard
Jenkins dashboard ----> Build executor status (left pane bottom) ----> Currently you will see "Built-in node" which means it is a MASTER node ----> Click on "New Node" ----> Node name: slave2, Type: Permanent Agent ----> Create ----> Name: slave2 ----> Description: This is Slave 2 ----> No. of executors: 3 (this is to run number of builds parallelly) ----> Remote root directory: /tmp (In this path of slave nodes, the builds will be stored) ----> Labels: slave2 (This label name is very important because this label name is the same name we should configure in the pipeline script. Based on this only, the job will get executed on whichever worker node we want) ----> Usage: Only build jobs with label expressions matching this node ----> Launch method: Launch agents via SSH ----> Host: <PrivateIPofSlave2> ----> Credentials: From the dropdown, select "ec2-user" (Since both slave nodes have same pem file, we can directly use the existing credentials. If its a different pem file, we have to follow the process as we have followed in Slave 1) ----> Host key verification strategy: Non verifying verification strategy ----> Availability: Keep this agent online as much as possible ----> Save ----> You can see Slave2 got added. Just refresh, you will see the values under free disk space, free temp space and other options available

This is the configuration of master and slave

*********
Step 5
*********
Creation of PIPELINE Job
Repo URL: git 'https://github.com/KastroVKiran/Hotstar-App.git' (Hotstar App)

New item ---> Name: Pipeline-Job ---> Pipeline ---> Create ---> Pipeline (left pane) ---> Keep the below script;
#Jenkins File For HOSTAR App - Jenkins Master and Slave Concept
#Pipeline 1 - without Tomcat integration

pipeline {
    agent {
        label 'slave1'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git '<Repo URL>'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Maven Package') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Deployment') {
            steps {
                echo 'Deployment Completed'
            }
        }
    }
}

The job will be successfully built.

Goto Slave 1 Connected tab in MobaXTerm ----> cd /tmp/workspace/hotstar/target/myapp.war ----> You will see the war file.
This is how we can store the build information on a different server.

Now i want to do the deployment in Tomcat server.


*********
Step 6
*********
Lets launch one server for tomcat and do the final deployment.
Launch Amazon Linux 2 AMI, t2.micro, Name: Tomcat Server

Install JAVA ----> sudo yum install java-17-amazon-corretto -y ----> yum install maven git -y

TOMCAT WEBSERVER INSTALLATION ON AMAZON LINUX 2 EC2 INSTANCE
https://tomcat.apache.org/download-90.cgi ----> Downloads ----> Tomcat 9 ----> Copy the link of tar.gz file ----> https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73.tar.gz ----> sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apachetomcat-9.0.73.tar.gz ----> ls -l ----> You will the tomcat file in red colour. This is a tar.gz file and we have to extract the tar.gz file ----> tar -xvf <enter the name of tomcat file in red colour> ----> All the files will get extracted ----> ls -l ----> You will see the list of extracted files ---> cd <enter the name of tomcat file in blue colour>

Lets start the tomcat server:
Inorder to start the tomcat server, we need a file called "startup.sh"
This "startup.sh" file will be there in "bin" folder ----> cd bin ----> ls -l ----> you will see startup.sh file ----> ./startup.sh ----> You will see "Tomcat Started"
Lets access the tomcat server:
Here we can access only the Home page of Tomcat.

Inorder to access complete tomcat server, we need to do the configuration in "context.xml" file. 
apache-tomcat-9.0.73/webapps/manager/META-INF/context.xml

cd apache-tomcat-9.0.73/webapps/manager/META-INF/context.xml ----> vi context.xml ----> You will see a "valve" tag. You have to edit "Allow" tag ----> ".*" />

Configuring the Users in Tomcat
---------------------------------------------
we need to edit the tomcat-users.xml to configure the users. The "tomcat-users.xml" file is available in "conf" folder
<role rolename="manager-gui" />
<user username="tomcat" password="tomcat" roles="manager-gui" />
<role rolename="admin-gui" />
<user username="admin" password="admin" roles="manager-gui,admin-gui"/>

cd bin
./shutdown.sh
./startup.sh

Access Tomcat on Browser ----> Click on Server Status ----> Enter the username (admin) and password (admin)

Inorder to do the automation, Jenkins is going to execute some script to deploy the war file into the Tomcat Webserver.
___________________________________________________________
Adding the manager-script role in tomcat-users.xml file
___________________________________________________________
In order to do the automation, Tomcat user should have a "manager-script" permission. There should be one user in the Tomcat with the "manager-script" permission. Then with that user credentials we can automate the deployment process.

Goto MobaXTerm and Connect to the Instance ----> ls -l ----> cd apache-tomcat-9.0.73 ----> ls -l ----> cd conf ----> ls -l ----> You can see tomcat-users.xml ----> vi tomcat-users.xml ----> Scroll down till you see "role rolename="manager-gui"", go to the last but-one line and type the below
<role rolename="manager-script" /> 
Goto the last line of "user username="admin"", and type manager-script at the last, just before inverted quotations ----> esc ----> :wq

*********
Step 7
*********
Install 'deploy to container' and 'pipeline stage view' plugins in Jenkins 

Lets configure Tomcat credentials in Jenkins
Manage Jenkins ----> Security ----> Credentials ----> Click on 'global' under 'Stores scoped to jenkins' ----> Add credentials ----> Kind: Username with password, Scope: Global, Username: tomcat, Password: tomcat, ID: tomcat-creds, Description: tomcat-creds ----> Create

For the generation of script for 'Deployment' stage ----> Open job ----> Generate pipeline syntax ----> Sample step: deploy: Deploy war/ear to a container ----> WAR/EAR files: **/*.war ----> Context path: HotstarApp ----> Add containers: Tomcat 9.x Remote ----> Credentials: Select 'tomcat-creds' from dropdown ----> Tomcat URL: Provide the tomcat url upto 8080/ ----> Generate pipeline script ----> Copy the script

Sample Script Generated: 
deploy adapters: [tomcat9(credentialsId: 'tomcatcreds', path: '', url: 'http://22.212.367.177:8080')], contextPath: 'myapp', war: '**/*.war'

Paste the above script in the below pipeline at 'Deployment' stage ---> Apply ----> Save ----> Build now

#Jenkins File For HOSTAR App - Jenkins Master and Slave Concept
#Pipeline 2 - with Tomcat integration
pipeline {
    agent {
        label 'slave1'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git '<Repo URL>'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Maven Package') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Deployment') {
            steps {
                deploy adapters: [tomcat9(credentialsId: 'tomcatcreds', path: '', url: 'http://22.212.367.177:8080')], contextPath: 'myapp', war: '**/*.war'
            }
        }
    }
}

----> Build will be success ---> Goto tomcat dashboard and reload ----> You will see 'HotstarApp' ----> Click on it, you will see the app.

Goto console output and check where the job is executed.


------------------------------------------------------------------------------------------
3️⃣ Jenkins Installation on Ubuntu VM
------------------------------------------------------------------------------------------
1) Create Ubuntu VM (t2.micro type)
2) Connect to your EC2 instance using MobaXterm
3) Install Java using below commands
$ sudo apt-get update
$ sudo apt-get install default-jre

4) Install Jenkins with below commands
$ curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null

$ echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

$ sudo apt-get update

$ sudo apt-get install jenkins

$ sudo systemctl status jenkins
 
5) Access Jenkins Server in browser using below URL
		URL : http://ec2-public-ip:8080/
	Note: Enable 8080 port in security group
 
6) Get the initial administrative password 
	$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword
	
-> Provide password which we have copied to unlock jenkins

-> Select "Install Suggested Plugins" card (it will install those plugins)

-> Create Admin account

---------------------------------------------------------
🟥 SonarQube
--------------------------------------------------------- 
Repo URL: https://github.com/KastroVKiran/SonarQube-Project-Kastro.git (Code along with text document for commands and setup)
Video Link: https://youtu.be/opJAfDOCZuI?si=C58p0r025HM-1n9K
---------------------------------------------------------
🟥 Nexus
---------------------------------------------------------
Repo URL: https://github.com/KastroVKiran/Nexus-by-Kastro.git (For Text Document Setup and Commands)
Repo URL: https://github.com/KastroVKiran/Nexus-Demo.git (For the application code)
Video Link: https://youtu.be/opJAfDOCZuI?si=OIq-XZimpK8ap_go








------------------------------------------------------------------------------------------
4️⃣ Recovering Jenkins password
------------------------------------------------------------------------------------------
cd /var/lib/jenkins ----> vi config.xml ----> Scroll to <UseSecurity> tag ----> Change 'true'  to 'false' ----> restart the jenkins ----> sudo systemctl restart jenkins ----> Login to the jenkins

Jenkins console ----> Manage jenkins ----> Security ----> Security Realm: You can see 'None', change 'none' to 'Jenkins own user database' ----> Apply ----> Save

MobaXTerm ----> cd /var/lib/jenkins ----> vi config.xml ----> You can see 'true' for security tag.
'True' is being seen because of the changes in security realm.

Jenkins console ----> People ----> Select 'Username' of jenkins ----> Configure ----> Scroll down to see 'Password' ----> Type password ----> Apply ----> Save.

Logout of the jenkins ----> Login again with new password.





