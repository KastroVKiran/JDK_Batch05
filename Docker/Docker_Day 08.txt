												Online LIVE Training on 
										JENKINS üë®‚Äçüíº + DOCKER üê≥ + KUBERNETES ‚ò∏Ô∏è
														by
												KASTRO KIRAN V
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Agenda of the Session - DOCKER
*****************************************
1Ô∏è‚É£ Replicated Service vs Global Service
2Ô∏è‚É£ DevSecOps Tools
3Ô∏è‚É£ Docker Projects - Overview
4Ô∏è‚É£ Interview Questions

-----------------------------------------------------------
1Ô∏è‚É£ Replicated Service vs Global Service
-----------------------------------------------------------
These two concepts are related to Docker Swarm

A replicated service allows you to define how many copies (replicas) of container should run across the swarm cluster
Docker swarm then spreads these replicas across the available nodes - not necessarily one per each node
Even if a node fails or it is removed, the service adjusts to maintain the desired number of replicas on the nodes
This is best for scaling applications horizontally

A global service ensures exactly one container to run on each node in the swarm
It doesn't use a "replica count" - it just runs one container per node
When a new node joins the swarm, Docker automatically starts the service on new node
If a node is removed, the service count reduces accordingly
This is ideal for system-level tasks that need to run on each node - for example log collection, monitoring of agents

‚úÖ Step-by-Step Guide: Docker Swarm + Replicated vs Global Services
üñ•Ô∏è Setup
1 Manager Node (e.g., manager-node)
2 Worker Nodes (e.g., worker-node1, worker-node2)

üîπ STEP 1: Initialize Docker Swarm on the Manager Node
üîπ STEP 2: Join Worker Nodes to the Swarm
			After this, run the following on the manager to verify:
				- docker node ls
				‚úÖ You should see all 3 nodes listed (1 manager, 2 workers).
üîπ STEP 3: Deploy a Replicated Service
	Run this on the manager node:
	docker service create --name my-web --replicas 5 -p 8080:80 nginx
	‚úÖ What this does:
	Creates a service called my-web.
	Runs 5 replicas of nginx spread across nodes.
	Exposes port 8080 of the cluster to serve NGINX.

	üîç Check the status:
	docker service ls
	docker service ps my-web
	üß† Note: The replicas will be distributed (e.g., 3 on one worker, 2 on another).

üîπ STEP 4: Deploy a Global Service
	Run this on the manager node:
	docker service create --name log-agent --mode global alpine sh -c "while true; do echo logging; sleep 60; done"
	‚úÖ What this does:
	Creates a log-agent global service using Alpine Linux.
	Runs 1 container on each node, including the manager.
	The container just prints ‚Äúlogging‚Äù every 60 seconds to simulate a log agent.
	üîç Check the service:
	docker service ps log-agent
	‚úÖ You‚Äôll see 1 task per node ‚Äî exactly 3 tasks for 3 nodes.

üîπ STEP 5: Simulate Node Failure 
	To test behavior:
	Stop Docker on one worker node:
	sudo systemctl stop docker
	On the manager node, re-check services:
	docker service ps my-web
	docker service ps log-agent
	üéØ Result:
	Replicated service: Still tries to maintain 5 total replicas.
	Global service: Only 2 replicas now (since one node is down).

üîπ STEP 6: Clean Up
	docker service rm my-web
	docker service rm log-agent
	To leave the swarm (on worker nodes):
	docker swarm leave

	On the manager (optional if resetting):
	docker swarm leave --force

‚úÖ Summary Table
Feature			Replicated Service				Global Service
Create command	docker service create --replicas N	docker service create --mode global
Task placement	Docker distributes replicas		One task per node
Scaling			Manual using --replicas or scale	Auto-scales with node join/leave
Example use case	Web apps						Monitoring/log collection agents

-----------------------------------------------------------
2Ô∏è‚É£ DevSecOps Tools
-----------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Stage						Tool Examples						Key Role
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Code Scanning (SAST)			SonarQube, Checkmarx				Static code vulnerability scanning
Dependency Scanning			Snyk, OWASP Dependency Check		Detect issues in 3rd-party libraries
Container Security				Trivy, Grype, Aqua					Image vulnerability scanning
IaC Scanning					Checkov, TFSec					Find misconfigurations in Terraform/K8s
DAST						ZAP, Burp Suite					Simulate external attacks on running apps
Secrets Detection				Gitleaks, TruffleHog					Find hardcoded secrets in code or history
Policy Enforcement				OPA, Conftest						Ensure security compliance and rules
Runtime Monitoring			Falco, Sysdig						Detect live threats in containers
Pipeline Security				Jenkins Plugins, GitLab Ultimate		Secure CI/CD process
SBOM & Vulnerability Mgt		Syft, CycloneDX, DependencyTrack		Manage software supply chain risks

-----------------------------------------------------------
3Ô∏è‚É£ Docker Projects - Overview
-----------------------------------------------------------
1. Deploying Micro Services Ecommerce App - Docker Compose (Frontend HTML App)
	https://github.com/KastroVKiran/Kastro-Ecom-DC.git

2. Deploying Micro Services Book Management App - Docker Compose (Node App) - 3 Tier App
	https://github.com/KastroVKiran/DC-Project-BookApp.git

3. Docker-Compose Project - NGINX Load Balancer Concept for Docker - Python App (With Custom App)

4. Docker-Compose Project - NGINX Load Balancer Concept for Docker - Python App (With Public Docker Image) ---- Self Practice

5. Deploying Spring Boot Java App (Multi Stage Dockerfile)
	https://github.com/KastroVKiran/SpringBootJavaApp-Docker.git

6. Deploying Micro Services App - Docker Swarm
	https://github.com/KastroVKiran/Kastro-Ecom-DC.git

7*. Deploying Mock Exam Application - Docker Compose (Python App) - 3 Tier App ---- Self Practice (Jenkins + Docker + Docker Compose)
	https://github.com/KastroVKiran/devops-exam-app.git

8*. Deployment of SWIGGY App ---- Self Practice (Terraform + Jenkins + Docker + Docker Compose + SonarQube + Trivy + OWASP)
	https://youtu.be/x55z7rk0NAU 

-----------------------------------------------------------
4Ô∏è‚É£ Interview Questions
-----------------------------------------------------------


